version: '3.9'

###################################################
#    VOLUMES
##################################################
volumes:
  prometheus_data:

#################################################
#    NETWORKS
##################################################
# Create t2_proxy network
# docker network create t2_proxy
# docker network create socket_proxy
# Alternatively, you can specify the gateway and subnet to use
# docker network create --gateway 192.168.90.1 --subnet 192.168.90.0/24 t2_proxy
# docker network create --gateway 192.168.91.1 --subnet 192.168.91.0/24 socket_proxy
# Subnet range 192.168.0.0/16 covers 192.168.0.0 to 192.168.255.255

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

##################################################
#   SECRETS
##################################################

secrets:
  htpasswd:
    file: $TARSSECRETS/.htpasswd
  mysql_root_password:
    file: $TARSSECRETS/mysql_root_password
  mysql_ncloud_password:
    file: ${TARSSECRETS}/mysql_ncloud_password
  influx_password:
    file: $TARSSECRETS/influx_password
  nextcloud_admin_user:
    file: ${TARSSECRETS}/nextcloud_admin_user
  nextcloud_admin_password:
    file: ${TARSSECRETS}/nextcloud_admin_password


# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Proxy Network and Security
x-network-and-security: &network-and-security
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true

# Keys common to some of the services in basic-services.txt
x-common-keys-core: &common-keys-core
  <<: *network-and-security
  restart: always
  # profiles:
  # - core

# Keys common to some of the services in basic-services.txt
x-common-keys-monitoring: &common-keys-monitoring
  <<: *network-and-security
  restart: always
  # profiles:
  # - monitoring

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  <<: *network-and-security
  restart: unless-stopped
  # profiles:
  # - apps

# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  <<: *network-and-security
  restart: "no"
  # profiles:
  # - media


##################################################
#   SERVICES
##################################################

services:
#---
##############################        NET
#---
  traefik:
    image: traefik:v2.8
    container_name: traefik
    <<: *common-keys-core
    command:
      - --api=true
      - --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --pilot.token=$PILOTTOKEN
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entryPoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      # - --serversTransport.insecureSkipVerify=true
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.swarmMode=false
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --log.filePath=/traefik.log
      - --accessLog=true
      - --accessLog.filePath=/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254
    ports:
      # The HTTP port
      # - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      # - "8080:8080"
      # - "443:443"
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
        # - $TARSAPPS/traefik2/traefik.yml:/traefik.yml:ro
      - $TARSAPPS/traefik2/rules/:/rules/:ro
      - $TARSAPPS/traefik2/acme/acme.json:/acme.json
      - $TARSAPPS/traefik2/traefik.log:/traefik.log
      - $TARSAPPS/traefik2/access.log:/access.log
      - $TARSDIR/shared/:/shared/
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
        # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        # Настройка панели traefik
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      - "traefik.http.services.traefik-traefik.loadbalancer.server.port=888"
        ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
        # Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file"


  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    restart: always
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    ports:
      #    # - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
      #        # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
      - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=debug # debug,info,notice,warning,err,crit,alert,emerg
        ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
        # 0 to revoke access.
        # 1 to grant access.
        ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
        ## Revoked by Default
        # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Ouroboros
        # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portaienr
      - VOLUMES=1 # Portainer


  instantprivacy:
    image: linuxconfig/instantprivacy
    container_name: instantprivacy
    restart: unless-stopped
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.250


# vpn:
#   container_name: vpn
#   image: dperson/openvpn-client:latest
#   cap_add:
#     - net_admin # required to modify network interfaces
#   restart: unless-stopped
#   volumes:
#     - /dev/net:/dev/net:z # tun device
#     - $TARSAPPS/vpn:/vpn # OpenVPN configuration
#   security_opt:
#     - label:disable
#   ports:
#     - 8112:8112 # port for deluge web UI to be reachable from local network
#   command: "-r 192.100.0.0/24" # route local network traffic



  #### ADGUARD - блокировщик рекламы
  adguard-home:
    image: adguard/adguardhome:latest
    container_name: adguard-home
    restart: unless-stopped
    dns:
      - 127.0.0.1
      - 1.1.1.1
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "8053:80/tcp"
      - "853:853/tcp"
      - "3000:3000/tcp"
    volumes:
      - $TARSAPPS/adguard/conf:/opt/adguardhome/conf
      - $TARSAPPS/adguard/work:/opt/adguardhome/work
    environment:
      <<: *default-tz-puid-pgid

#---
##############################         FRONT
#---

  #### Organizr - Unified Frontend
  organizr:
    <<: *common-keys-apps
    container_name: organizr
    # image: organizrtools/organizr-v2:latest
    image: organizr/organizr:latest
    volumes:
      - $TARSAPPS/organizr:/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
        ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=https"
      - "traefik.http.routers.organizr-rtr.tls=true"
      - "traefik.http.routers.organizr-rtr.rule=Host(`$DOMAINNAME`) || Host(`www.$DOMAINNAME`)"
        ## Middlewares
      - "traefik.http.routers.organizr-rtr.middlewares=organizr-redirect@docker"
        # Redirect non-www to www middleware
      - "traefik.http.middlewares.organizr-redirect.redirectregex.regex=^https?://$DOMAINNAME/(.*)"
      - "traefik.http.middlewares.organizr-redirect.redirectregex.replacement=https://www.$DOMAINNAME/$${1}"
      - "traefik.http.middlewares.organizr-redirect.redirectregex.permanent=true"
        ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"

    # Heimdall - Unified Frontend Alternative
    # Putting all services behind Oragnizr slows things down.
  heimdall:
    <<: *common-keys-apps
    container_name: heimdall
    image: linuxserver/heimdall:latest
    restart: unless-stopped
    # networks:
    #   - t2_proxy
    # security_opt:
    #   - no-new-privileges:true
#    ports:
#      - "$HEIMDALL_PORT:80"
    volumes:
      - $TARSAPPS/heimdall:/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
        ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.tls=true"
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`heimdall.$DOMAINNAME`)"
        ## Middlewares
      - "traefik.http.routers.heimdall-rtr.middlewares=middlewares-basic-auth@file"
        ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"


    #---
    ##############################         DOWNLOADS
    #---

  qbittorrent:
    image: ghcr.io/linuxserver/qbittorrent
    # image: linuxserver/qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - WEBUI_PORT=8080
    volumes:
      - $TARSAPPS/qbittorrent:/config
      - $USERDIR/SHARE/data:/data
      # - $USERDIR/SHARE/Torrents/complete:/downloads
      # - $USERDIR/SHARE/Torrents/watch:/watch
      # - $USERDIR/SHARE/Torrents/.incomplete:/incomplete
      # - $USERDIR/SHARE/Torrents/torrent_file:/torrents
    ports:
      - 6881:6881
      - 6881:6881/udp
      # - 8080:8080
    restart: unless-stopped
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.100
    labels:
      - "traefik.enable=true"
        ## HTTP Routers
      - "traefik.http.routers.qbittorrent-rtr.tls=true"
      - "traefik.http.routers.qbittorrent-rtr.entrypoints=https"
      - "traefik.http.routers.qbittorrent-rtr.rule=HostHeader(`qb.$DOMAINNAME`)"
        ## Middlewares
        # - "traefik.http.routers.dozzle-rtr.middlewares=chain-authelia@file"
        # - "traefik.http.routers.qbittorrent-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file"
        ## HTTP Services
      - "traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc"
      - "traefik.http.services.qbittorrent-svc.loadbalancer.server.port=8080"


# alpine-qbittorrent-openvpn:
#   volumes:
#     - "/your/storage/path/:/downloads"
#     - "/path/to/config/directory:/config"
#     - "/etc/localtime:/etc/localtime:ro"
#   environment:
#     - OPENVPN_PROVIDER=PIA
#     - OPENVPN_CONFIG=ca_toronto
#     - OPENVPN_USERNAME=user
#     - OPENVPN_PASSWORD=pass
#     - PUID=1000
#     - PGID=1000
#     - LAN=192.168.0.0/16
#   ports:
#     - "8080:8080"
#   cap_add:
#     - NET_ADMIN
#   image: guillaumedsde/alpine-qbittorrent-openvpn:latest


  #Cloud
  resilio-sync:
    image: linuxserver/resilio-sync
    container_name: resilio-sync
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK_SET=022 #optional
    volumes:
      - $TARSAPPS/rssync/config:/config
      - $TARSAPPS/rssync/downloads:/downloads
      - $USERDIR/SHARE/Cloud:/sync
    ports:
      # - 8888:8888
      - 55555:55555
    restart: unless-stopped
    networks:
      - t2_proxy
    labels:
      - "traefik.enable=true"
        ## HTTP Routers
      - "traefik.http.routers.rssync-rtr.tls=true"
      - "traefik.http.routers.rssync-rtr.entrypoints=https"
      - "traefik.http.routers.rssync-rtr.rule=HostHeader(`cloud.$DOMAINNAME`)"
        ## Middlewares
        # - "traefik.http.routers.jackett-rtr.middlewares=chain-authelia@file"
      - "traefik.http.routers.rssync-rtr.middlewares=middlewares-rate-limit@file"
        ## HTTP Services
      - "traefik.http.routers.rssync-rtr.service=rssync-svc"
      - "traefik.http.services.rssync-svc.loadbalancer.server.port=8888"

  #Cloud2
  nextcloud:
    <<: *common-keys-apps
    container_name: nextcloud
    depends_on:
      - traefik
      - mariadb
    image: nextcloud:stable
    volumes:
      - ${TARSAPPS}/nextcloud:/var/www/html
      # - ${USERDIR}/shared_data:/data
      # - ${USERDIR}/docker/shared:/shared
    ports:
      - "8081:80"
    environment:
      # <<: *default-tz-puid-pgid
      - MYSQL_DATABASE=nextcloud_db
      - MYSQL_USER=ncloud
      - MYSQL_HOST=mariadb
      - MYSQL_PASSWORDi_FILE=/run/secrets/mysql_ncloud_password
      - NEXTCLOUD_ADMIN_PASSWORD_FILE=/run/secrets/nextcloud_admin_password
      - NEXTCLOUD_ADMIN_USER_FILE=/run/secrets/nextcloud_admin_user
    secrets:
      - mysql_ncloud_password
      - nextcloud_admin_password
      - nextcloud_admin_user
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.nextcloud.middlewares=nextcloud,nextcloud_redirect"
      - "traefik.http.routers.nextcloud-rtr.tls=true"
      - "traefik.http.routers.nextcloud-rtr.entrypoints=https"
      # - "traefik.http.routers.nextcloud.tls.certresolver=lets-encrypt"
      # - "traefik.http.routers.nextcloud.tls.certresolver=tlschallenge"
      - "traefik.http.routers.nextcloud-rtr.rule=HostHeader(`nextcloud.$DOMAINNAME`)"
      - "traefik.http.routers.nextcloud-rtr.service=nextcloud-svc"
      - "traefik.http.services.nextcloud-svc.loadbalancer.server.port=80"
      # - "traefik.http.routers.nextcloud-rtr.tls.certresolver=tlschallenge"
      # - "traefik.http.routers.nextcloud-rtr.middlewares=nextcloud-dav,secHeaders@file"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.regex=^/.well-known/ca(l|rd)dav"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.replacement=/remote.php/dav/"
      - "traefik.http.middlewares.nextcloud.headers.customFrameOptionsValue=ALLOW-FROM https://${DOMAINNAME}"
      - "traefik.http.middlewares.nextcloud.headers.contentSecurityPolicy=frame-ancestors 'self' ${DOMAINNAME} *.${DOMAINNAME}"
      - "traefik.http.middlewares.nextcloud.headers.stsSeconds=155520011"
      - "traefik.http.middlewares.nextcloud.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.nextcloud.headers.stsPreload=true"


  ##############################        SEARCH & INDEXERS
  #---

  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $TARSAPPS/sonarr:/config
      # - /тут/ваша/папка/с/сериалами:/serials
      - $USERDIR/SHARE/data:/data
      # ports:
      # - 8989:8989
    restart: always
    networks:
      - t2_proxy
    labels:
      - "traefik.enable=true"
        ## HTTP Routers
      - "traefik.http.routers.sonarr-rtr.tls=true"
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=HostHeader(`sonarr.$DOMAINNAME`)"
        ## Middlewares
        # - "traefik.http.routers.sonarr-rtr.middlewares=chain-authelia@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file"
        ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"


  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $TARSAPPS/radarr:/config
      # - /тут/папка/с/фильмами:/movies
      - $USERDIR/SHARE/data:/data
      # ports:
      # - 7878:7878
    restart: always
    networks:
      - t2_proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.radarr-rtr.tls=true"
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=HostHeader(`radarr.$DOMAINNAME`)"
      ## Middlewares
        # - "traefik.http.routers.radarr-rtr.middlewares=chain-authelia@file"
      - "traefik.http.routers.radarr-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file"
        ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"


  lidarr:
    image: ghcr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $TARSAPPS/lidarr:/config
        # - /path/to/music:/music
        # - /path/to/downloads:/downloads
      - $USERDIR/SHARE/data:/data
        # ports:
        # - 8686:8686
    restart: unless-stopped
    networks:
      - t2_proxy
    labels:
      - "traefik.enable=true"
        ## HTTP Routers
      - "traefik.http.routers.lidarr-rtr.tls=true"
      - "traefik.http.routers.lidarr-rtr.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr.rule=HostHeader(`lidarr.$DOMAINNAME`)"
        ## Middlewares
        # - "traefik.http.routers.lidarr-rtr.middlewares=chain-authelia@file"
      - "traefik.http.routers.lidarr-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file"
        ## HTTP Services
      - "traefik.http.routers.lidarr-rtr.service=lidarr-svc"
      - "traefik.http.services.lidarr-svc.loadbalancer.server.port=8686"


  jackett:
    image: linuxserver/jackett
    container_name: jackett
    volumes:
      - $TARSAPPS/jackett:/config
        # ports:
        # - 9117:9117
    restart: always
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
        # - RUN_OPTS=--ProxyConnection=torproxy:8118
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.10
          # network_mode: container:torproxy
          # depends_on:
          # - torproxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jackett-rtr.tls=true"
      - "traefik.http.routers.jackett-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-rtr.rule=HostHeader(`jackett.$DOMAINNAME`)"
        ## Middlewares
        # - "traefik.http.routers.jackett-rtr.middlewares=chain-authelia@file"
      - "traefik.http.routers.jackett-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file"
        ## HTTP Services
      - "traefik.http.routers.jackett-rtr.service=jackett-svc"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=9117"

  #---
  ##############################        MEDIA
  #---

  plex:
    image: ghcr.io/linuxserver/plex
    container_name: plex
    security_opt:
      - no-new-privileges:true
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.150
        # network_mode: host
    ports:
      - 32400:32400/tcp
      - 32400:32400/udp
      #   - 3005:3005/tcp
      #   - 8324:8324/tcp
      #   - 32469:32469/tcp
      #   - 1900:1900/udp
      #   - 32410:32410/udp
      #   - 32412:32412/udp
      #   - 32413:32413/udp
      #   - 32414:32414/udp
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - VERSION=docker
      - PLEX_CLAIM=claim-_VyJcfLUR1V_1F88fVj_
      - ADVERTISE_IP="http://192.100.0.100:32400"
      - HOSYNAME="DockerPlex"
        # - UMASK=022
        # - ALLOWED_NETWORKS=192.168.90.0/24,192.100.0.0/24,172.16.0.0/16
    volumes:
      - $TARSAPPS/plex/config:/config
      - $TARSAPPS/plex/transcode:/transcode
      - $USERDIR/SHARE/data:/data
    devices:
      - /dev/dri:/dev/dri
    labels:
      - "traefik.enable=true"
        ## HTTP Routers
      - "traefik.http.routers.plex-rtr.tls=true"
      - "traefik.http.routers.plex-rtr.entrypoints=https"
      - "traefik.http.routers.plex-rtr.rule=HostHeader(`plex.$DOMAINNAME`)"
        ## Middlewares
        # - "traefik.http.routers.plex-rtr.middlewares=chain-authelia@file"
        # - "traefik.http.routers.plex-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file"
        ## HTTP Services
      - "traefik.http.routers.plex-rtr.service=plex-svc"
      - "traefik.http.services.plex-svc.loadbalancer.server.port=32400"

  # ombi:
  #   image: ghcr.io/linuxserver/ombi
  #   container_name: ombi
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Europe/London
  #     - BASE_URL=/ombi #optional
  #   volumes:
  #     - /path/to/appdata/config:/config
  #   ports:
  #     - 3579:3579
  #   restart: unless-stopped

  # ombi:
  #   container_name: ombi
  #   restart: always
  #   image: linuxserver/ombi
  #   image: ghcr.io/linuxserver/ombi
  #   volumes:
  #     - ${USERDIR}/docker/ombi:/config
  #     - ${USERDIR}/docker/shared:/shared
  #   ports:
  #     - "$OMBI_PORT:3579"
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.ombi-rtr.tls=true"
  # - "traefik.docker.network=traefik_proxy"
  # - "traefik.http.routers.ombi-rtr.entrypoints=https"
  # - "traefik.http.routers.ombi-rtr.rule=HostHeader(`ombi.$DOMAINNAME`)"
  # - "traefik.http.routers.ombi-rtr.service=ombi-svc"
  # - "traefik.http.services.ombi-svc.loadbalancer.server.port=3579"
  # - "traefik.http.routers.ombi-rtr.tls.certresolver=letsencrypt"
  # - "traefik.http.routers.ombi.tls.domains[0].main=*.example.com"
  # - "traefik.http.routers.ombi.tls.domains[0].sans=example.com"
  # - "traefik.http.middlewares.ombi-rtr.headers.SSLRedirect=true"
  # - "traefik.http.middlewares.ombi-rtr.headers.STSSeconds=315360000"
  # - "traefik.http.middlewares.ombi-rtr.headers.browserXSSFilter=true"
  # - "traefik.http.middlewares.ombi-rtr.headers.contentTypeNosniff=true"
  # - "traefik.http.middlewares.ombi-rtr.headers.forceSTSHeader=true"
  # - "traefik.http.middlewares.ombi-rtr.headers.SSLHost="
  # - "traefik.http.middlewares.ombi-rtr.headers.STSIncludeSubdomains=true"
  # - "traefik.http.middlewares.ombi.headers.STSPreload=true"
  # - "traefik.http.middlewares.ombi.headers.frameDeny=true"

  #---
  ##############################         SYSTEM
  #---

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    networks:
      - t2_proxy
      - socket_proxy
    depends_on:
      - socket-proxy
    security_opt:
      - no-new-privileges:true
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      DOCKER_HOST: tcp://socket-proxy:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    labels:
      - "traefik.enable=true"
        ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.tls=true"
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=HostHeader(`dozzle.$DOMAINNAME`)"
        ## Middlewares
        # - "traefik.http.routers.dozzle-rtr.middlewares=chain-authelia@file"
      - "traefik.http.routers.dozzle-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file"
        ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

  # Glances - System Information
  # glances:
  #   image: nicolargo/glances:latest
  #   container_name: glances
  #   restart: unless-stopped
  #   privileged: true
  #   # network_mode: host
  #   networks:
  #     - t2_proxy
  #     - socket_proxy
  #   depends_on:
  #     - socket-proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   # ports:
  #   #   - "$GLANCES_PORT:61208"
  #   pid: host
  #   volumes:
  #     - $TARSAPPS/glances/glances.conf:/glances/conf/glances.conf # Use this if you want to add a glances.conf file
  # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
  # environment:
  # GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
  # GLANCES_OPT: "-w"
  # DOCKER_HOST: tcp://socket-proxy:2375
  # labels:
  # - "traefik.enable=true"
  ## HTTP Routers
  # - "traefik.http.routers.glances-rtr.entrypoints=https"
  # - "traefik.http.routers.glances-rtr.rule=HostHeader(`glances.$DOMAINNAME`)"
  ## Middlewares
  # - "traefik.http.routers.glances-rtr.middlewares=chain-authelia@file"
  ## HTTP Services
  # - "traefik.http.routers.glances-rtr.service=glances-svc"
  # - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

  #---
  #############################     DATABASES
  #---

  # PostgreSQL
  pg_db:
    image: postgres
    container_name: postgres
    <<: *common-keys-core
    environment:
      - POSTGRES_PASSWORD=selectel
      - POSTGRES_USER=selectel
      - POSTGRES_DB=selectel
    volumes:
      - $TARSAPPS/postgres/data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"

  # MariaDB - MySQL Database
  # After starting container for first time dexec and mysqladmin -u root password <password>
  mariadb:
    container_name: mariadb
    image: linuxserver/mariadb:latest
    restart: always
    hostname: mariadb
    security_opt:
      - no-new-privileges:true
    ports:
      - "$MARIADB_PORT:3306"
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.25
    volumes:
      - $TARSAPPS/mariadb/data:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - FILE__MYSQL_ROOT_PASSWORD=/run/secrets/mysql_root_password # Note FILE__ (double underscore) - Issue #127
    secrets:
      - mysql_root_password

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    restart: always
    depends_on:
      - node-exporter
    networks:
      - t2_proxy
    ports:
      - "9090:9090"
    volumes:
      # - prom-data:/prometheus
      - prometheus_data:/prometheus
      # - prom-configs:/etc/prometheus
      - $TARSAPPS/prometheus/conf/:/etc/prometheus/
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    hostname: node-exporter
    restart: always
    networks:
      - t2_proxy
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude'
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'

  # InfluxDB - Database for sensor data
  # Create influxdb.conf
  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: always
    security_opt:
      - no-new-privileges:true
    ports:
      - "$INFLUXDB_PORT:8086"
      # - "$INFLUXDB_PORT_PROXMOX:8087/udp"
    networks:
      - t2_proxy
        # ipv4_address: 192.168.90.15
    volumes:
      - $TARSAPPS/influxdb/etc/config.yml:/etc/influxdb2/config.yml
      - $TARSAPPS/influxdb/db:/var/lib/influxdb2:rw
      # command: -config /etc/influxdb/influxdb.conf
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=$INFLUX_INIT_USER
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_INIT_PASS}
      - DOCKER_INFLUXDB_INIT_ORG=$INFLUX_INIT_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET=$INFLUX_INIT_BUCKET
      - DOCKER_INFLUXDB_ADMIN_ENABLED=true
      - DOCKER_INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER}
      - DOCKER_INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASS}
    secrets:
      - influx_password
    labels:
      - "traefik.enable=true"
        ## HTTP Routers
      - "traefik.http.routers.ifnfluxdb-rtr.tls=true"
      - "traefik.http.routers.ifnfluxdb-rtr.entrypoints=https"
      - "traefik.http.routers.ifnfluxdb-rtr.rule=Host(`ifdb.$DOMAINNAME`)"
        ## Middlewares
        # - "traefik.http.routers.ifnfluxdb-rtr.middlewares=chain-oauth@file"
        ## HTTP Services
      - "traefik.http.routers.ifnfluxdb-rtr.service=ifnfluxdb-svc"
      - "traefik.http.services.ifnfluxdb-svc.loadbalancer.server.port=8086"



  # phpMyAdmin - Database management
  # Create a new user with admin privileges. Cannot login as MySQL root for some reason.
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    restart: unless-stopped
    networks:
      - t2_proxy
      - default
    security_opt:
      - no-new-privileges:true
    # ports:
       #   - "$PHPMYADMIN_PORT:80"
    # volumes:
       #   - $DOCKERDIR/appdata/phpmyadmin:/etc/phpmyadmin
    environment:
      - PMA_HOST=mariadb
      - PMA_PORT=$MARIADB_PORT
        #- PMA_ARBITRARY=1
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
    secrets:
      - mysql_root_password
    labels:
      - "traefik.enable=true"
        ## HTTP Routers
      - "traefik.http.routers.phpmyadmin-rtr.tls=true"
      - "traefik.http.routers.phpmyadmin-rtr.entrypoints=https"
      - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma.$DOMAINNAME`)"
        ## Middlewares
        # - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-oauth@file"
        ## HTTP Services
      - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
      - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"


  # Grafana - Graphical data visualization for InfluxDB data
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - 3001:3000
    # security_opt:
    #   - no-new-privileges:true
      # ports:
      #   - "$GRAFANA_PORT:3000"
    depends_on:
      - influxdb
    user: "0"
    volumes:
      - $TARSAPPS/grafana:/var/lib/grafana
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.grafana-rtr.tls=true"
      - "traefik.http.routers.grafana-rtr.entrypoints=https"
      - "traefik.http.routers.grafana-rtr.rule=Host(`grafana.$DOMAINNAME`)"
      ## Middlewares
      # - "traefik.http.routers.grafana-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.grafana-rtr.service=grafana-svc"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"


  cadvisor:
    image: google/cadvisor:latest
    container_name: monitoring_cadvisor
    hostname: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    # devices:
    #   - "/dev/kmsg:/dev/kmsg"
    expose:
      - 8082
    networks:
      - t2_proxy
    # labels:
    #   - "traefik.enable=true"
    #   ## HTTP Routers
    #   - "traefik.http.routers.cadvisor-rtr.tls=true"
    #   - "traefik.http.routers.cadvisor-rtr.entrypoints=https"
    #   - "traefik.http.routers.cadvisor-rtr.rule=Host(`cadvisor.$DOMAINNAME`)"
    #   ## Middlewares
    #   # - "traefik.http.routers.cadvisor-rtr.middlewares=chain-oauth@file"
    #   ## HTTP Services
    #   - "traefik.http.routers.cadvisor-rtr.service=cadvisor-svc"
    #   - "traefik.http.services.cadvisor-svc.loadbalancer.server.port=8080"


  ############################# MAINTENANCE

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    restart: unless-stopped
    # networks:
    #   - socket_proxy
    # depends_on:
    #   - socket-proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $TARSAPPS/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      # DOCKER_HOST: tcp://socket-proxy:2375

  # # Traefik Certs Dumper - Extract LetsEncrypt Certificates - Traefik2 Compatible
  certdumper:
    container_name: traefik_certdumper
    image: humenius/traefik-certs-dumper:latest
    network_mode: none
    security_opt:
      - no-new-privileges:true
      # command: --restart-containers container1,container2,container3
    volumes:
      - $TARSAPPS/traefik2/acme:/traefik:ro
      - $TARSDIR/shared/certs:/output:rw
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Only needed if restarting containers (use Docker Socket Proxy instead)
    environment:
      DOMAIN: $DOMAINNAME

  # Cloudflare-Companion - Automatic CNAME DNS Creation
  #cf-companion:
  #  container_name: cf-companion
  #  image: tiredofit/traefik-cloudflare-companion:latest
  #  security_opt:
  #    - no-new-privileges:true
  #  restart: unless-stopped
  #  networks:
  #    - socket_proxy
  #  #depends_on:
  #  #  - socket-proxy
  #  environment:
  #    - TIMEZONE=$TZ
  #    - TRAEFIK_VERSION=2
  #    #- CF_EMAIL=$CLOUDFLARE_EMAIL
  #    - CF_TOKEN=$CLOUDFLARE_API_TOKEN
  #    - TARGET_DOMAIN=$DOMAINNAME0
  #    - DOMAIN1=$DOMAINNAME0
  #    - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONEID # Copy from Cloudflare Overview page
  #    - DOMAIN1_PROXIED=TRUE
  #    - DOCKER_HOST=tcp://socket-proxy:2375
  #  secrets: # not working
  #    - cloudflare_api_token
  #  labels:
  #    # Add hosts specified in rules here to force cf-companion to create the CNAMEs
  #    # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
  #    - "traefik.http.routers.cf-companion-rtr.rule=Host(`mox.$DOMAINNAME0`) || Host(`pwt.$DOMAINNAME0`) || Host(`webmin.$DOMAINNAME0`) || Host(`shell.$DOMAINNAME0`)"


  watchtower:
    container_name: watchtower
    restart: always
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 * * *" --cleanup


  # Lazylibrarian  – Ebooks and Management
  lazylibrarian:
    image: linuxserver/lazylibrarian
    container_name: lazylibrarian
    restart: unless-stopped
    # profiles:
    # - media
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    # ports:
      #  - "$LAZYLIBRARIAN_PORT:5299"
    volumes:
      - $TARSAPPS/lazylibrarian:/config
      # - $DATADIR/downloads:/data/downloads
      - $USERDIR/SHARE/data:/data
      - $TARSAPPS/calibre/books:/books:rw
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      DOCKER_MODS: linuxserver/calibre-web:calibre # set the path to converter tool to /app/calibre/ebook-convert
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.lazylibrarian-rtr.tls=true"
      - "traefik.http.routers.lazylibrarian-rtr.entrypoints=https"
      - "traefik.http.routers.lazylibrarian-rtr.rule=Host(`lazy.$DOMAINNAME`)"
      ## Middlewares
      # - "traefik.http.routers.lazylibrarian-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.lazylibrarian-rtr.service=lazylibrarian-svc"
      - "traefik.http.services.lazylibrarian-svc.loadbalancer.server.port=5299"

  ############################# MEDIA

  # Calibre-web  – Ebooks and Management (Plex of Ebooks)
  calibre-web:
    image: linuxserver/calibre-web
    container_name: calibre-web
    restart: "no"
      # profiles:
      # - media
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
      # ports:
      #  - "$CALIBRE_WEB_PORT:8083"
    volumes:
      - $TARSAPPS/calibre-web:/config
      # - add path to calibre books folder
      - $USERDIR/SHARE/data:/data
      # - $DATADIR/media/books:/books:rw
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      DOCKER_MODS: linuxserver/calibre-web:calibre # set the path to converter tool to /app/calibre/ebook-convert
      UMASK: 002
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.calibre-web-rtr.tls=true"
      - "traefik.http.routers.calibre-web-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-web-rtr.rule=Host(`calweb.$DOMAINNAME`)"
      ## Middlewares
      # - "traefik.http.routers.calibre-web-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.calibre-web-rtr.service=calibre-web-svc"
      - "traefik.http.services.calibre-web-svc.loadbalancer.server.port=8083"

  # Calibre  – Ebooks and Management (Server)
  calibre:
    image: lscr.io/linuxserver/calibre
    container_name: calibre
    restart: "no"
    # profiles:
      # - media
    networks:
      - t2_proxy
    security_opt:
    - no-new-privileges:true
    # ports:
    #  - "$CALIBRE_PORT:8080" # Desktop GUI
    #  - "$CALIBRE_PORT:8081" # Webserver GUI
    volumes:
      - $TARSAPPS/calibre:/config:rw
      - $USERDIR/SHARE/data:/data
      # - $DATADIR/downloads:/data/downloads:rw
      # - $DATADIR/media/books:/data/media/books:rw
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      # - GUAC_USER=abc #Gucamole user optional
      # - GUAC_PASS=900150983cd24fb0d6963f7d28e17f72 #Guacamole password optional
      - UMASK_SET=002 #optional
      # - CLI_ARGS= #optional
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.calibre-rtr.tls=true"
      - "traefik.http.routers.calibre-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-rtr.rule=Host(`calibre.$DOMAINNAME`)"
      ## Middlewares
      # - "traefik.http.routers.calibre-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.calibre-rtr.service=calibre-svc"
      - "traefik.http.services.calibre-svc.loadbalancer.server.port=8080"
